#include<math.h>
int min(int a,int b)
{
    if(a<b)
        return a;
    else
        return b;
}
int max1(int a,int b)
{
    if(a>b)
        return a;
    else
        return b;
}
int networkDelayTime(int** times, int timesSize, int* timesColSize, int n, int k)
{
    int max=10000;
    int i,j,u,v,w;
    int *dist=(int *)malloc(n*sizeof(int));
    for(i=0;i<n;i++)
    {
        dist[i]=max;
    }
    dist[k-1]=0;
    for(i=0;i<n;i++)
    {
        for(j=0;j<timesSize;j++)
        {
            u=times[j][0]-1;
            v=times[j][1]-1;
            w=times[j][2];
            dist[v]=min(dist[v],dist[u]+w);
        }
    }
    int ans=0;
    for(i=0;i<n;i++)
    {
        if(dist[i]==max)
        {
            return -1;
        }
        ans=max1(ans,dist[i]);
    }
    return ans;
}

Output:
enter no of nodes(n) : 4
enter starting node(k) : 2
enter no of edges : 3
enter no of elements : 3
enter elements : 
2
1
1
2
3
1
3
4
1
Minimum time is : 2 





#include <limits.h>

int max(int num1, int num2)
{
    return (num1 > num2 ) ? num1 : num2;
}

int networkDelayTime(int** times, int timesSize, int* timesColSize, int n, int k){

    int dist[n+1];
    for(int i=0; i<n+1; i++){
        dist[i]=INT_MAX;
    }

    dist[k] = 0;
    for (int i=0; i<timesSize; i++){
        for (int j=0; j<timesSize; j++){
            int u = times[i][0], v = times[i][1], w = times[i][2];
            if ((dist[u] != INT_MAX) && (dist[v] > dist[u] + w)) {
                dist[v] = dist[u] + w;
            }
        }
    }

    int max_wait = 0;
    for (int i = 1; i <= n; i++)
        max_wait = max(max_wait, dist[i]);
    if(max_wait == INT_MAX){
        return -1;
    }
    else{
        return max_wait;
    }
}